#!/usr/bin/python
# Alex O'Neill - aoneill@cmu.edu

#########################################################
## 15-150 Function Type / Requires / Ensures Generator ##
#########################################################

import sys, glob, os, subprocess

def usage():
  print "Usage: docgen <filepath>, <filepath>, ..."

# Try to detect if we should place documentation or not
def detectDoc(lines, i):
  if(i < 4):
    return True
  
  # Check to see if it already has documentation
  for line in lines[i - 4:i]:
    if("require" in line.lower() or "ensure" in line.lower()):
      return False

  return True

# Where the magic happens!
def produceDocumentation(path, fileName):
  print (path, fileName)
  return

  smlFile = open(path)

  # Get lines
  lines = [line.strip() for line in smlFile]
  smlFile.close()

  # Run the file in the interpreter
  pipeIn = subprocess.Popen(["echo", 
             "val _ = OS.Process.exit(OS.Process.success);"],
             stdout = subprocess.PIPE)
  
  # Try to open the file
  try:
    output = subprocess.check_output(["sml", path], stdin = pipeIn.stdout,
                                        stderr = subprocess.PIPE).splitlines()
  except:
    print fileName, "could not be compiled by SML!"
    usage()
    sys.exit(0)

  # Parse the sml file, mapping function names to function types
  smlRef = {}
  for line in (output):
    if(line.startswith("val")):
      line = line[3:]
      (fnName, fnType) = tuple(map(lambda x: x.strip(), line.split(":")))
      fnName = fnName.split()[0]

      # Store
      smlRef[fnName] = fnType
  
  # Create a list of the final file output
  finalLines = []
  for i in xrange(len(lines)):
    # Find functions
    if(lines[i].startswith("fun") and detectDoc(lines, i)):
      fnName = lines[i][3:].strip().split()[0]
      fnType = smlRef[fnName]

      # Insert the compiled information
      finalLines += ["(*"]
      finalLines += ["    %s : %s" % (fnName, fnType)]
      finalLines += ["    REQUIRES: true"]
      finalLines += ["    ENSURES: %s" % fnName]
      finalLines += ["*)"]
    
    finalLines += [lines[i]]

  # Write to a temp file, tell user
  outFile = open(path + ".tmp", "w")
  for line in finalLines:
    outFile.write("%s\n" % line)
  outFile.close()

  print ("Comments generated for %s, and output to %s!" % 
    (fileName, fileName + ".tmp"))

# Where the magic is invoked
def main():
  args = sys.argv
  
  # Usage check
  if(len(args) < 2):
    usage()
    sys.exit(0)
 
  # Open files
  for arg in args[1:]:
    path = os.path.join(os.getcwd(), arg)
    if(not os.path.isfile(path)):
      possible = glob.glob(path)
      if(len(possible)):
        for fileName in possible:
          produceDocumentation(path, fileName)
      else:
        print arg, "not found!"
        usage()
        sys.exit(0)
    else:
      produceDocumentation(path, arg)

# Run it!
if(__name__ == "__main__"):
  main()
